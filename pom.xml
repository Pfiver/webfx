<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>naga</groupId>
    <artifactId>naga</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <modules>
        <module>naga-core</module>
        <module>naga-javaplat</module>
        <module>naga-jre</module>
        <module>naga-android</module>
        <module>naga-teavm</module>
        <module>naga-gwt</module>
        <module>naga-j2objc</module>
        <module>naga-vertx</module>
        <module>naga-examples</module>
    </modules>

    <properties>
        <!-- java version -->
        <java.version>8</java.version>
        <java.level>1.${java.version}</java.level>

        <!-- libraries versions -->
        <lib.javawebsocket.version>1.3.0</lib.javawebsocket.version>
        <lib.json-smart.version>1.3.1</lib.json-smart.version> <!-- version 2.2.1 doesn't work on android -->
        <lib.jackson.version>2.6.1</lib.jackson.version> <!-- used only if provided -->
        <lib.android.version>4.1.1.4</lib.android.version>
        <lib.teavm.version>0.4.1</lib.teavm.version>
        <lib.gwt.version>2.8.0-SNAPSHOT</lib.gwt.version>
        <lib.vertx.version>3.1.0</lib.vertx.version>

        <!-- plugins versions -->
        <plugin.jar.version>2.4</plugin.jar.version>
        <plugin.install.version>2.5.2</plugin.install.version>
        <plugin.source.version>2.4</plugin.source.version>
        <plugin.dependency.version>2.10</plugin.dependency.version>
        <plugin.shade.version>2.4.2</plugin.shade.version>
        <plugin.proguard.version>2.0.11</plugin.proguard.version>
        <plugin.teavm.version>${lib.teavm.version}</plugin.teavm.version>
        <plugin.gwt.version>${lib.gwt.version}</plugin.gwt.version>
        <plugin.antrun.version>1.8</plugin.antrun.version>
        <plugin.download.version>1.2.1</plugin.download.version>

        <!-- external tools versions -->
        <tool.j2objc.version>0.9.8.2.1</tool.j2objc.version>

        <!-- To Be Defined parameters that any module has to override when using a transpiler plugin pre-configured in the <pluginManagement> section -->
        <param.jar.addMavenDescriptor>true</param.jar.addMavenDescriptor>
        <param.install.skip>false</param.install.skip>
        <param.jre.mainClass>TBD</param.jre.mainClass>
        <param.teavm.mainClass>TBD</param.teavm.mainClass>
        <param.gwt.module>TBD</param.gwt.module>
        <param.gwt.compileSourcesArtifact1>TBD</param.gwt.compileSourcesArtifact1>
        <param.gwt.compileSourcesArtifact2>TBD</param.gwt.compileSourcesArtifact2>
        <param.gwt.compileSourcesArtifact3>TBD</param.gwt.compileSourcesArtifact3>

        <!-- properties used for j2objc install and execution -->
        <param.j2objc.parent>${user.home}</param.j2objc.parent>
        <param.j2objc.folderName>j2objc-${tool.j2objc.version}</param.j2objc.folderName>
        <param.j2objc.home>${param.j2objc.parent}/${param.j2objc.folderName}</param.j2objc.home>
        <param.j2objc.jar>${param.j2objc.home}/lib/j2objc.jar</param.j2objc.jar>

        <!-- Applying compiler settings -->
        <maven.compiler.source>${java.level}</maven.compiler.source>
        <maven.compiler.target>${java.level}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <repositories>
        <!-- Adding Google Snapshots repository which is required to get GWT 2.8.0-SNAPSHOT -->
        <repository>
            <id>google-snapshots</id>
            <name>Google Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/google-snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <!-- Adding Snapshots repository which is required to get the GWT 2.8.0-SNAPSHOT Maven plugin -->
        <pluginRepository>
            <id>snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>google-snapshots</id>
            <name>Google Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/google-snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
    </pluginRepositories>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <artifactId>naga-core</artifactId>
                <groupId>${project.groupId}</groupId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <artifactId>naga-javaplat</artifactId>
                <groupId>${project.groupId}</groupId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <artifactId>naga-teavm</artifactId>
                <groupId>${project.groupId}</groupId>
                <version>${project.version}</version>
            </dependency>

            <!-- Emulator of Java class library for TeaVM -->
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-classlib</artifactId>
                <version>${lib.teavm.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- JavaScriptObjects (JSO) - a JavaScript binding for TeaVM -->
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-jso</artifactId>
                <version>${lib.teavm.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Google Web Toolkit (GWT) -->
            <dependency>
                <groupId>com.google.gwt</groupId>
                <artifactId>gwt-user</artifactId>
                <version>${lib.gwt.version}</version>
            </dependency>

            <!-- Android -->
            <dependency>
                <groupId>com.google.android</groupId>
                <artifactId>android</artifactId>
                <version>${lib.android.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Json-smart (lightweight JSON library for java) -->
            <dependency>
                <groupId>net.minidev</groupId>
                <artifactId>json-smart</artifactId>
                <version>${lib.json-smart.version}</version>
            </dependency>

            <!-- Jackson (another JSON library for java which will be used instead if provided) -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${lib.jackson.version}</version>
                <optional>true</optional>
                <scope>provided</scope>
            </dependency>

            <!-- JavaWebsocket -->
            <dependency>
                <groupId>org.java-websocket</groupId>
                <artifactId>Java-WebSocket</artifactId>
                <version>${lib.javawebsocket.version}</version>
            </dependency>

            <!-- Vert.x -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-web</artifactId>
                <version>${lib.vertx.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <pluginManagement>
            <!-- plugins listed here are just pre-configured for a possible use in a module -->
            <plugins>

                <!-- Plugin to set the main class in the manifest file when packaging an executable jre application -->
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${plugin.jar.version}</version>
                    <configuration>
                        <archive>
                            <!-- Whether or not including META-INF/maven/** coming from dependencies -->
                            <addMavenDescriptor>${param.jar.addMavenDescriptor}</addMavenDescriptor>
                        </archive>
                    </configuration>
                </plugin>

                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${plugin.install.version}</version>
                    <configuration>
                        <skip>${param.install.skip}</skip>
                    </configuration>
                </plugin>

                <!-- Plugin to generate the sources artifacts which will be used by GWT which is java source code transpiler (and not a bytecode transpiler like TeaVM) -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${plugin.source.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Plugin to unpack dependencies with their source. This is required before calling j2objc -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${plugin.dependency.version}</version>
                    <executions>
                        <execution>
                            <id>sources-dependencies</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <classifier>sources</classifier>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/sources</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>classes-dependencies</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                            </configuration>
                        </execution>
                        <!-- Also copying these libraries in a lib folder for eventual reference in the classpath -->
                        <execution>
                            <id>lib-dependencies</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration >
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>



            </plugins>
        </pluginManagement>

    </build>

    <profiles>

        <!--
         *****************
         * Shade profile *
         *****************
         Shade is a plugin to build fat jars (with all dependencies included in it)
         -->
        <profile>
            <id>shade</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-shade-plugin</artifactId>
                            <version>${plugin.shade.version}</version>
                            <executions>
                                <execution>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>shade</goal>
                                    </goals>
                                    <configuration>
                                        <transformers>
                                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                                <mainClass>${param.jre.mainClass}</mainClass>
                                            </transformer>
                                        </transformers>
                                        <filters>
                                            <filter>
                                                <artifact>*:*</artifact>
                                                <excludes>
                                                    <exclude>META-INF/maven/**</exclude>
                                                </excludes>
                                            </filter>
                                        </filters>
                                        <createDependencyReducedPom>false</createDependencyReducedPom>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <!--
         ********************
         * Proguard profile *
         ********************
         Proguard is a plugin to minimize the jar file by obfuscation
         -->
        <profile>
            <id>proguard</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>com.github.wvengen</groupId>
                            <artifactId>proguard-maven-plugin</artifactId>
                            <version>${plugin.proguard.version}</version>
                            <executions>
                                <execution>
                                    <phase>package</phase>
                                    <goals><goal>proguard</goal></goals>
                                </execution>
                            </executions>
                            <configuration>
                                <options>
                                    <!-- keeping the main class and its main static method -->
                                    <option>-keep public public class ${param.jre.mainClass} { public static void
                                        main(java.lang.String[]); }</option>
                                    <!-- keeping Platform and subclasses as they are referenced in META-INF/services -->
                                    <option>-keep public public class naga.core.spi.platform.Platform</option>
                                    <option>-keep public public class * extends naga.core.spi.platform.Platform</option>
                                    <!-- ignoring jackson missing warnings as it is an optional library -->
                                    <option>-dontwarn com.fasterxml.jackson.**</option>
                                    <option>-allowaccessmodification</option>
                                    <option>-optimizationpasses 5</option>
                                    <!-- uncomment this if something goes wrong with json-smart as suggested in the warning -->
                                    <!--option>-keepattributes Signature</option-->
                                </options>
                                <libs>
                                    <lib>${java.home}/lib/rt.jar</lib>
                                </libs>
                                <includeDependency>true</includeDependency>
                                <includeDependencyInjar>true</includeDependencyInjar>
                                <exclusions>
                                    <exclusion>
                                        <groupId>com.fasterxml.jackson.core</groupId>
                                        <artifactId>*</artifactId>
                                    </exclusion>
                                </exclusions>
                                <inFilter>!META-INF/MANIFEST.MF</inFilter>
                                <outFilter>!META-INF/maven/**</outFilter>
                                <archive>
                                    <manifest>
                                        <mainClass>${param.jre.mainClass}</mainClass>
                                    </manifest>
                                </archive>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <!--
         *****************
         * TeaVM profile *
         *****************
         -->
        <profile>
            <id>teavm</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <!-- TeaVM plugin configuration -->
                        <plugin>
                            <groupId>org.teavm</groupId>
                            <artifactId>teavm-maven-plugin</artifactId>
                            <version>${plugin.teavm.version}</version>
                            <dependencies>
                                <!-- This dependency is required by TeaVM to emulate subset of Java class library -->
                                <dependency>
                                    <groupId>org.teavm</groupId>
                                    <artifactId>teavm-classlib</artifactId>
                                    <version>${lib.teavm.version}</version>
                                </dependency>
                            </dependencies>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>compile</goal>
                                    </goals>
                                    <phase>process-classes</phase>
                                    <configuration>
                                        <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings of the WAR plugin -->
                                        <targetDirectory>${project.build.outputDirectory}/webroot/js/teavm</targetDirectory>

                                        <!-- Main class, containing static void main(String[]) -->
                                        <mainClass>${param.teavm.mainClass}</mainClass>

                                        <!-- How to attach runtime.js. Possible values are: SEPARATE, MERGED and NONE -->
                                        <runtime>SEPARATE</runtime>
                                        <!-- Whether TeaVM should produce minified JavaScript. Can reduce JavaScript file size more than two times -->
                                        <minifying>false</minifying>
                                        <mainPageIncluded>true</mainPageIncluded>
                                        <!-- Whether TeaVM should produce debug information for its built-in debugger -->
                                        <debugInformationGenerated>true</debugInformationGenerated>
                                        <!-- Whether TeaVM should produce source maps file -->
                                        <sourceMapsGenerated>true</sourceMapsGenerated>
                                        <!-- Whether TeaVM should also put source files into output directory, for compatibility with source maps -->
                                        <sourceFilesCopied>false</sourceFilesCopied>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <!--
         ***************
         * GWT profile *
         ***************
         -->
        <profile>
            <id>gwt</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <!-- GWT plugin configuration -->
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>gwt-maven-plugin</artifactId>
                            <version>${plugin.gwt.version}</version>
                            <dependencies>
                                <dependency>
                                    <groupId>com.google.gwt</groupId>
                                    <artifactId>gwt-user</artifactId>
                                    <version>${lib.gwt.version}</version>
                                </dependency>
                                <dependency>
                                    <groupId>com.google.gwt</groupId>
                                    <artifactId>gwt-dev</artifactId>
                                    <version>${lib.gwt.version}</version>
                                </dependency>
                            </dependencies>
                            <executions>
                                <execution>
                                    <configuration>
                                        <module>${param.gwt.module}</module>
                                        <failOnError>true</failOnError>
                                        <compileSourcesArtifacts>
                                            <compileSourcesArtifact>${param.gwt.compileSourcesArtifact1}</compileSourcesArtifact>
                                            <compileSourcesArtifact>${param.gwt.compileSourcesArtifact2}</compileSourcesArtifact>
                                            <compileSourcesArtifact>${param.gwt.compileSourcesArtifact3}</compileSourcesArtifact>
                                        </compileSourcesArtifacts>
                                    </configuration>
                                    <goals>
                                        <goal>compile</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <!--
         ******************
         * J2objc profile *
         ******************
         -->
        <profile>
            <id>j2objc</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <j2objc-profile-activated>true</j2objc-profile-activated>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <!-- Plugin for j2obc execution (using ant for iteration over java source files) -->
                        <plugin>
                            <artifactId>maven-antrun-plugin</artifactId>
                            <version>${plugin.antrun.version}</version>
                            <executions>
                                <execution>
                                    <phase>compile</phase>
                                    <configuration>
                                        <target>
                                            <apply executable="${env.JAVA_HOME}/bin/java" dir="${project.basedir}" failonerror="true">
                                                <arg value="-jar"/>
                                                <arg value="${param.j2objc.jar}"/>
                                                <arg value="-Xbootclasspath:${param.j2objc.home}/lib/jre_emul.jar"/>
                                                <arg value="-sourcepath"/>
                                                <arg value="${project.basedir}/src/main/java${path.separator}${project.build.directory}/sources"/>
                                                <arg value="-d"/>
                                                <arg value="${project.build.directory}/generated/objc"/>
                                                <arg value="-source"/>
                                                <arg value="${java.version}"/>
                                                <arg value="-Xforce-incomplete-java8"/>
                                                <fileset dir="${project.build.directory}/sources" includes="**/*.java"/>
                                                <fileset dir="${project.basedir}/src/main/java" includes="**/*.java"/>
                                            </apply>
                                        </target>
                                    </configuration>
                                    <goals>
                                        <goal>run</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>

                        <!-- Failed attempt of writing a Maven only plugin: don't know how to iterate over all java source files -->
                        <!-- plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>exec-maven-plugin</artifactId>
                            <version>1.4.0</version>
                            <executions>
                                <execution>
                                    <id>run-j2objc</id>
                                    <phase>compile</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>${env.JAVA_HOME}/bin/java</executable>
                                        <arguments>
                                            <argument>-jar</argument>
                                            <argument>${j2objc.jar}</argument>
                                            <argument>-Xbootclasspath:${j2objc.home}/lib/jre_emul.jar</argument>
                                            <argument>-sourcepath</argument>
                                            <argument>${basedir}/src/main/java${path.separator}${project.build.directory}/sources</argument>
                                            <argument>-d</argument>
                                            <argument>${project.build.directory}/generated/objc</argument>
                                            <argument>**/*.java</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin-->
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <!--
         **************************
         * J2objc-download profile *
         **************************
         Automatic j2objc install (zip download & unpack in the user directory)
         Done just once, when this root pom is executed for the first time on the build machine
         using a maven profile in order to skip the install if already done
         -->
        <profile>
            <id>j2objc-download</id>
            <activation>
                <!-- the profile is activated only if j2objc profile is activated and if j2objc.jar doesn't exist -->
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>j2objc-profile-activated</name>
                    <value>false</value>
                </property>
                <file>
                    <!-- <missing>${j2objc.jar}</missing> doesn't work (properties not supported here) so using explicit name -->
                    <missing>${user.home}/j2objc-0.9.8.2.1/lib/j2objc.jar</missing> <!-- env properties are however supported -->
                </file>
                <!-- otherwise j2objc is considered already installed and the installation is skipped -->
            </activation>
            <build>
                <plugins>
                    <!-- j2objc download (big zip file) and unpack -->
                    <plugin>
                        <groupId>com.googlecode.maven-download-plugin</groupId>
                        <artifactId>download-maven-plugin</artifactId>
                        <version>${plugin.download.version}</version>
                        <inherited>false</inherited> <!-- to not run it in children modules -->
                        <executions>
                            <execution>
                                <id>j2objc-download</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://github.com/google/j2objc/releases/download/${tool.j2objc.version}/j2objc-${tool.j2objc.version}.zip</url>
                                    <unpack>true</unpack>
                                    <overwrite>false</overwrite>
                                    <outputDirectory>${param.j2objc.parent}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>