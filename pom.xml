<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>naga</groupId>
    <artifactId>naga</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <modules>
        <!-- Naga modules -->
        <module>naga-javalibs</module>
        <module>naga-core</module>
        <module>naga-javaemuls</module>
        <module>naga-platforms</module>
        <module>naga-guis</module>

        <module>naga-application-examples</module>

        <module>mongoose</module>
    </modules>

    <properties>
        <!-- java version -->
        <java.version>8</java.version>
        <java.level>1.${java.version}</java.level>

        <!-- Naga groupId & version -->
        <naga.groupId>naga</naga.groupId>
        <naga.version>0.1.0-SNAPSHOT</naga.version>

        <!-- libraries versions -->
        <lib.javawebsocket.version>1.3.0</lib.javawebsocket.version>
        <lib.json-smart.version>1.3.1</lib.json-smart.version> <!-- version 2.2.1 doesn't work on android -->
        <lib.jackson.version>2.6.1</lib.jackson.version> <!-- used only if provided -->
        <lib.android.version>4.1.1.4</lib.android.version>
        <lib.teavm.version>0.4.3</lib.teavm.version>
        <lib.gwt.version>2.8.0-beta1</lib.gwt.version>
        <lib.vertx.version>3.2.1</lib.vertx.version>
        <lib.javacuprutime.version>11b</lib.javacuprutime.version>
        <lib.rxjava.version>1.1.1</lib.rxjava.version>
        <lib.gwt-material.version>1.5.0-SNAPSHOT</lib.gwt-material.version>

        <!-- plugins versions -->
        <plugin.jar.version>2.4</plugin.jar.version>
        <plugin.source.version>2.4</plugin.source.version>
        <plugin.dependency.version>2.10</plugin.dependency.version>
        <plugin.javacup.version>1.0.1</plugin.javacup.version>
        <plugin.jflex.version>1.6.1</plugin.jflex.version>
        <plugin.shade.version>2.4.3</plugin.shade.version>
        <plugin.proguard.version>2.0.11</plugin.proguard.version>
        <plugin.retrolambda.version>2.0.6</plugin.retrolambda.version>
        <plugin.android.version>4.3.0</plugin.android.version>
        <plugin.teavm.version>${lib.teavm.version}</plugin.teavm.version>
        <plugin.gwt.version>${lib.gwt.version}</plugin.gwt.version>
        <plugin.antrun.version>1.8</plugin.antrun.version>
        <plugin.download.version>1.2.1</plugin.download.version>

        <!-- external tools versions -->
        <tool.j2objc.version>1.0.0</tool.j2objc.version>

        <!-- Plugin parameters with default values or set to TBD (To Be Defined) by any child module using the plugin -->
        <plugin.jar.param.addMavenDescriptor>true</plugin.jar.param.addMavenDescriptor>
        <plugin.dependency.param.unpack-sources.phase>validate</plugin.dependency.param.unpack-sources.phase>
        <plugin.dependency.param.unpack-classes.phase>validate</plugin.dependency.param.unpack-classes.phase>
        <plugin.dependency.param.unpack-classes.includes>**</plugin.dependency.param.unpack-classes.includes>
        <plugin.dependency.param.copy-libs.phase>validate</plugin.dependency.param.copy-libs.phase>
        <plugin.shade.param.fat.phase>package</plugin.shade.param.fat.phase>
        <plugin.android.param.sdk.platform>23</plugin.android.param.sdk.platform>
        <plugin.teavm.param.mainClass>TBD</plugin.teavm.param.mainClass>
        <plugin.teavm.minifying>true</plugin.teavm.minifying>
        <plugin.teavm.debug>false</plugin.teavm.debug>
        <plugin.gwt.param.module>TBD</plugin.gwt.param.module>
        <plugin.gwt.param.compileSourcesArtifact1>TBD</plugin.gwt.param.compileSourcesArtifact1>
        <plugin.gwt.param.compileSourcesArtifact2>TBD</plugin.gwt.param.compileSourcesArtifact2>
        <plugin.gwt.param.compileSourcesArtifact3>TBD</plugin.gwt.param.compileSourcesArtifact3>
        <plugin.gwt.param.compileSourcesArtifact4>TBD</plugin.gwt.param.compileSourcesArtifact4>
        <plugin.gwt.param.compileSourcesArtifact5>TBD</plugin.gwt.param.compileSourcesArtifact5>
        <plugin.gwt.param.compileSourcesArtifact6>TBD</plugin.gwt.param.compileSourcesArtifact6>
        <plugin.gwt.param.compileSourcesArtifact7>TBD</plugin.gwt.param.compileSourcesArtifact7>
        <plugins.param.jre.mainClass>TBD</plugins.param.jre.mainClass>
        <plugin.grunt.disabled>true</plugin.grunt.disabled> <!-- Grunt disabled unless grunt profile is activated -->

        <!-- properties used for j2objc tool (install and execution) -->
        <tool.j2objc.param.parent>${user.home}</tool.j2objc.param.parent>
        <tool.j2objc.param.folderName>j2objc-${tool.j2objc.version}</tool.j2objc.param.folderName>
        <tool.j2objc.param.home>${tool.j2objc.param.parent}/${tool.j2objc.param.folderName}</tool.j2objc.param.home>
        <tool.j2objc.param.jar>${tool.j2objc.param.home}/lib/j2objc.jar</tool.j2objc.param.jar>

        <!-- Applying compiler settings -->
        <maven.compiler.source>${java.level}</maven.compiler.source>
        <maven.compiler.target>${java.level}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <pluginRepositories>
        <!-- Adding Snapshots repository which is required to get the GWT 2.8.0-SNAPSHOT Maven plugin -->
        <!-- Not used anymore, now using GWT plugin version 2.8.0-beta1
        <pluginRepository>
            <id>snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
        -->
    </pluginRepositories>

    <repositories>
        <!-- For JFoenix -->
        <repository>
            <id>snapshots</id>
            <url>https://oss.sonatype.org/content/groups/public</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>

            <!--
             ****************************************************
             * Libraries required for the Naga Core (naga-core) *
             ****************************************************
             Note that java-cup-runtime and rxjava can't be transpiled as is, so they are replaced with forked and
             minimized versions (naga-javalib-javacupruntime and naga-javalib-rxjava) in naga-abstractplat-web (see pom).
             -->
            <dependency>
                <artifactId>java-cup-runtime</artifactId>
                <groupId>com.github.vbmacher</groupId>
                <version>${lib.javacuprutime.version}</version>
            </dependency>

            <dependency>
                <artifactId>rxjava</artifactId>
                <groupId>io.reactivex</groupId>
                <version>${lib.rxjava.version}</version>
            </dependency>

            <!--
             *********************************************************************
             * Libraries required for the Java Platform (naga-abstractplat-java) *
             *********************************************************************
             -->

            <!-- JavaWebsocket -->
            <dependency>
                <groupId>org.java-websocket</groupId>
                <artifactId>Java-WebSocket</artifactId>
                <version>${lib.javawebsocket.version}</version>
            </dependency>

            <!-- Json-smart (lightweight JSON library for java) -->
            <dependency>
                <groupId>net.minidev</groupId>
                <artifactId>json-smart</artifactId>
                <version>${lib.json-smart.version}</version>
            </dependency>

            <!-- Jackson (another JSON library for java which will be used instead if provided) -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${lib.jackson.version}</version>
                <optional>true</optional>
                <scope>provided</scope>
            </dependency>


            <!--
             *******************************************************************
             * Libraries required for the Android Platform (naga-plat-android) *
             *******************************************************************
             -->

            <!-- Android library -->
            <dependency>
                <groupId>com.google.android</groupId>
                <artifactId>android</artifactId>
                <version>${lib.android.version}</version>
                <scope>provided</scope>
            </dependency>


            <!--
             ***********************************************************
             * Libraries required for the Vert.x Platform (naga-plat-vertx) *
             ***********************************************************
             -->

            <!-- Vert.x core -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-core</artifactId>
                <version>${lib.vertx.version}</version>
            </dependency>

            <!-- Vert.x web -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-web</artifactId>
                <version>${lib.vertx.version}</version>
            </dependency>

            <!-- Vert.x postgres and mysql really-asynchronous client -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-mysql-postgresql-client</artifactId>
                <version>${lib.vertx.version}</version>
            </dependency>

            <!-- Vert.x jdbc pseudo-asynchronous client -->
            <dependency>
                <groupId>io.vertx</groupId>
                <artifactId>vertx-jdbc-client</artifactId>
                <version>${lib.vertx.version}</version>
            </dependency>


            <!--
             ***************************************************************
             * Libraries required for the TeaVM Platform (naga-plat-teavm) *
             ***************************************************************
             -->

            <!-- Emulator of Java class library for TeaVM -->
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-classlib</artifactId>
                <version>${lib.teavm.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- JavaScriptObjects (JSO) - a JavaScript binding for TeaVM -->
            <dependency>
                <groupId>org.teavm</groupId>
                <artifactId>teavm-jso</artifactId>
                <version>${lib.teavm.version}</version>
                <scope>provided</scope>
            </dependency>


            <!--
             ***********************************************************
             * Libraries required for the GWT Platform (naga-plat-gwt) *
             ***********************************************************
             -->

            <!-- Google Web Toolkit (GWT) -->
            <dependency>
                <groupId>com.google.gwt</groupId>
                <artifactId>gwt-user</artifactId>
                <version>${lib.gwt.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <pluginManagement>
            <!-- plugins listed here are just pre-configured for a possible use in a module -->
            <plugins>

                <!--
                 **********************************
                 * Maven jar plugin configuration *
                 **********************************
                 -->
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${plugin.jar.version}</version>
                    <configuration>
                        <archive>
                            <!-- Whether or not including META-INF/maven/** coming from dependencies -->
                            <addMavenDescriptor>${plugin.jar.param.addMavenDescriptor}</addMavenDescriptor>
                        </archive>
                    </configuration>
                </plugin>


                <!--
                 **************************************
                 * Maven sources plugin configuration *
                 **************************************
                 Plugin to generate the sources artifacts which will be used by GWT which is java source code transpiler (and not a bytecode transpiler like TeaVM)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${plugin.source.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 *****************************************
                 * Maven dependency plugin configuration *
                 *****************************************
                 Plugin to unpack dependencies with their source. This is required before calling j2objc
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${plugin.dependency.version}</version>
                    <executions>
                        <execution>
                            <id>unpack-sources</id>
                            <phase>${plugin.dependency.param.unpack-sources.phase}</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <classifier>sources</classifier>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/sources</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>unpack-classes</id>
                            <phase>${plugin.dependency.param.unpack-classes.phase}</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                                <includes>${plugin.dependency.param.unpack-classes.includes}</includes>
                                <!-- Excluding maven dependencies metadata (can be big and is useless here) -->
                                <excludes>META-INF/maven/**</excludes>
                            </configuration>
                        </execution>
                        <!-- Also copying these libraries in a lib folder for eventual reference in the classpath -->
                        <execution>
                            <id>copy-libs</id>
                            <phase>${plugin.dependency.param.copy-libs.phase}</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration >
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 *********************************
                 * Java CUP plugin configuration *
                 *********************************
                 Java CUP is a parser generator, it produces the parser java code from a .cup grammar file
                 -->
                <plugin>
                    <groupId>com.github.vbmacher</groupId>
                    <artifactId>cup-maven-plugin</artifactId>
                    <version>${plugin.javacup.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ******************************
                 * JFlex plugin configuration *
                 ******************************
                 JFlex is a lexical analyzer generator, it produces the lexer java code from a .flex lexical file
                 -->
                <plugin>
                    <groupId>de.jflex</groupId>
                    <artifactId>jflex-maven-plugin</artifactId>
                    <version>${plugin.jflex.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ******************************
                 * Shade plugin configuration *
                 ******************************
                 Shade is a plugin to build fat jars (with all dependencies included in it)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${plugin.shade.version}</version>
                    <executions>
                        <execution>
                            <id>fat</id>
                            <phase>${plugin.shade.param.fat.phase}</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <!-- the output will have the classifier "-fat"  -->
                                <shadedArtifactAttached>true</shadedArtifactAttached>
                                <shadedClassifierName>fat</shadedClassifierName>
                                <transformers>
                                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        <manifestEntries>
                                            <Main-Class>${plugins.param.jre.mainClass}</Main-Class>
                                            <Class-Path></Class-Path>
                                        </manifestEntries>
                                    </transformer>
                                </transformers>
                                <filters>
                                    <filter>
                                        <artifact>*:*</artifact>
                                        <excludes>
                                            <exclude>META-INF/maven/**</exclude>
                                        </excludes>
                                    </filter>
                                </filters>
                                <createDependencyReducedPom>false</createDependencyReducedPom>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 *********************************
                 * Proguard plugin configuration *
                 *********************************
                 Proguard is a plugin to minimize the jar file by obfuscation
                 -->
                <plugin>
                    <groupId>com.github.wvengen</groupId>
                    <artifactId>proguard-maven-plugin</artifactId>
                    <version>${plugin.proguard.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals><goal>proguard</goal></goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- the output will have the classifier "-min"  -->
                        <attach>true</attach>
                        <attachArtifactClassifier>min</attachArtifactClassifier>
                        <options>
                            <!-- keeping the main class and its main static method -->
                            <option>-keep public public class ${plugins.param.jre.mainClass} { public static
                                void
                                main(java.lang.String[]); }</option>
                            <!-- keeping Platform and subclasses as they are referenced in META-INF/services -->
                            <option>-keep public public class naga.core.spi.platform.Platform</option>
                            <option>-keep public public class * extends naga.core.spi.platform.Platform</option>
                            <!-- ignoring jackson missing warnings as it is an optional library -->
                            <option>-dontwarn com.fasterxml.jackson.**</option>
                            <!-- ignoring hikari missing warnings as it is an optional library -->
                            <option>-dontwarn com.zaxxer.hikari.**</option>
                            <option>-allowaccessmodification</option>
                            <option>-optimizationpasses 5</option>
                            <!-- uncomment this if something goes wrong with json-smart as suggested in the warning -->
                            <!--option>-keepattributes Signature</option-->
                        </options>
                        <libs>
                            <lib>${java.home}/lib/rt.jar</lib>
                            <lib>${java.home}/lib/ext/jfxrt.jar</lib>
                        </libs>
                        <includeDependency>true</includeDependency>
                        <includeDependencyInjar>true</includeDependencyInjar>
                        <exclusions>
                            <exclusion>
                                <groupId>com.fasterxml.jackson.core</groupId>
                                <artifactId>*</artifactId>
                            </exclusion>
                        </exclusions>
                        <inFilter>!META-INF/MANIFEST.MF</inFilter>
                        <outFilter>!META-INF/maven/**</outFilter>
                        <archive>
                            <manifest>
                                <mainClass>${plugins.param.jre.mainClass}</mainClass>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>

                <!--
                 ************************************
                 * Retrolambda plugin configuration *
                 ************************************
                -->
                <plugin>
                    <groupId>net.orfjackal.retrolambda</groupId>
                    <artifactId>retrolambda-maven-plugin</artifactId>
                    <version>${plugin.retrolambda.version}</version>
                    <configuration>
                        <defaultMethods>true</defaultMethods>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>process-main</goal>
                                <goal>process-test</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 ********************************
                 * Android plugin configuration *
                 ********************************
                 -->
                <plugin>
                    <groupId>com.simpligility.maven.plugins</groupId>
                    <artifactId>android-maven-plugin</artifactId>
                    <version>${plugin.android.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <sdk>
                            <platform>${plugin.android.param.sdk.platform}</platform>
                        </sdk>
                    </configuration>
                </plugin>


                <!--
                 ******************************
                 * TeaVM plugin configuration *
                 ******************************
                 -->
                <plugin>
                    <groupId>org.teavm</groupId>
                    <artifactId>teavm-maven-plugin</artifactId>
                    <version>${plugin.teavm.version}</version>
                    <dependencies>
                        <!-- Adding naga-javaemul-teavm before teavm-classlib so it can override TeaVM classes to extend them (see naga-javaemul-teavm pom case 2) -->
                        <dependency>
                            <artifactId>naga-javaemul-teavm</artifactId>
                            <groupId>${naga.groupId}</groupId>
                            <version>${naga.version}</version>
                        </dependency>
                        <dependency>
                            <artifactId>naga-javalib-javafxproperties</artifactId>
                            <groupId>${naga.groupId}</groupId>
                            <version>${naga.version}</version>
                        </dependency>
                        <!-- This dependency is required by TeaVM to emulate subset of Java class library -->
                        <dependency>
                            <groupId>org.teavm</groupId>
                            <artifactId>teavm-classlib</artifactId>
                            <version>${lib.teavm.version}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                            <phase>process-classes</phase>
                            <configuration>
                                <!-- Directory where TeaVM should put generated files. This configuration conforms to the settings of the WAR plugin -->
                                <targetDirectory>${project.build.outputDirectory}/webroot/${project.artifactId}/js</targetDirectory>

                                <!-- Main class, containing static void main(String[]) -->
                                <mainClass>${plugin.teavm.param.mainClass}</mainClass>

                                <!-- How to attach runtime.js. Possible values are: SEPARATE, MERGED and NONE -->
                                <runtime>SEPARATE</runtime>
                                <!-- Whether TeaVM should produce minified JavaScript. Can reduce JavaScript file size more than two times -->
                                <minifying>${plugin.teavm.minifying}</minifying>
                                <mainPageIncluded>true</mainPageIncluded>
                                <!-- Whether TeaVM should produce debug information for its built-in debugger -->
                                <debugInformationGenerated>${plugin.teavm.debug}</debugInformationGenerated>
                                <!-- Whether TeaVM should produce source maps file -->
                                <sourceMapsGenerated>${plugin.teavm.debug}</sourceMapsGenerated>
                                <!-- Whether TeaVM should also put source files into output directory, for compatibility with source maps -->
                                <sourceFilesCopied>${plugin.teavm.debug}</sourceFilesCopied>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ****************************
                 * GWT plugin configuration *
                 ****************************
                 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>gwt-maven-plugin</artifactId>
                    <version>${plugin.gwt.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>com.google.gwt</groupId>
                            <artifactId>gwt-user</artifactId>
                            <version>${lib.gwt.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>com.google.gwt</groupId>
                            <artifactId>gwt-dev</artifactId>
                            <version>${lib.gwt.version}</version>
                        </dependency>
                    </dependencies>
                    <executions>
                        <execution>
                            <configuration>
                                <module>${plugin.gwt.param.module}</module>
                                <failOnError>true</failOnError>
                                <closureCompiler>false</closureCompiler>
                                <draftCompile>false</draftCompile>
                                <incremental>false</incremental>
                                <persistentunitcache>false</persistentunitcache>
                                <compileSourcesArtifacts>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact1}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact2}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact3}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact4}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact5}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact6}</compileSourcesArtifact>
                                    <compileSourcesArtifact>${plugin.gwt.param.compileSourcesArtifact7}</compileSourcesArtifact>
                                </compileSourcesArtifacts>
                                <webappDirectory>${project.build.outputDirectory}/webroot/${project.artifactId}/js</webappDirectory>
                            </configuration>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ******************************
                 * Grunt plugin configuration *
                 ******************************
                 -->
                <plugin>
                    <groupId>pl.allegro</groupId>
                    <artifactId>grunt-maven-plugin</artifactId>
                    <version>1.4.1</version>
                    <configuration>
                        <!--gruntBuildDirectory>${basedir}/target-grunt</gruntBuildDirectory>
                        <sourceDirectory>${basedir}/src/main/webapp</sourceDirectory>
                        <jsSourceDirectory>static</jsSourceDirectory-->
                        <gruntOptions>
                            <gruntOption>--verbose</gruntOption>
                        </gruntOptions>
                        <disabled>${plugin.grunt.disabled}</disabled>
                    </configuration>
                    <executions>
                        <execution>
                            <phase>prepare-package</phase>
                            <goals>
                                <!--goal>create-resources</goal-->
                                <goal>npm</goal>
                                <!--goal>bower</goal-->
                                <goal>grunt</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 **********************************
                 * J2objc tool call configuration *
                 **********************************
                 -->
                <!-- Plugin for j2obc execution (using ant for iteration over java source files) -->
                <plugin>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${plugin.antrun.version}</version>
                    <executions>
                        <execution>
                            <phase>compile</phase>
                            <configuration>
                                <target>
                                    <apply executable="java" dir="${project.basedir}" failonerror="true">
                                        <arg value="-jar"/>
                                        <arg value="${tool.j2objc.param.jar}"/>
                                        <arg value="-Xbootclasspath:${tool.j2objc.param.home}/lib/jre_emul.jar"/>
                                        <arg value="-sourcepath"/>
                                        <arg value="${project.basedir}/src/main/java${path.separator}${project.build.directory}/sources"/>
                                        <arg value="-d"/>
                                        <arg value="${project.build.directory}/generated/objc"/>
                                        <arg value="-source"/>
                                        <arg value="${java.version}"/>
                                        <arg value="-Xforce-incomplete-java8"/>
                                        <fileset dir="${project.build.directory}/sources" includes="**/*.java"/>
                                        <fileset dir="${project.basedir}/src/main/java" includes="**/*.java"/>
                                    </apply>
                                </target>
                            </configuration>
                            <goals>
                                <goal>run</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- Failed attempt of writing a Maven only plugin: don't know how to iterate over all java source files -->
                <!-- plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.4.0</version>
                    <executions>
                        <execution>
                            <id>run-j2objc</id>
                            <phase>compile</phase>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                            <configuration>
                                <executable>${env.JAVA_HOME}/bin/java</executable>
                                <arguments>
                                    <argument>-jar</argument>
                                    <argument>${j2objc.jar}</argument>
                                    <argument>-Xbootclasspath:${j2objc.home}/lib/jre_emul.jar</argument>
                                    <argument>-sourcepath</argument>
                                    <argument>${basedir}/src/main/java${path.separator}${project.build.directory}/sources</argument>
                                    <argument>-d</argument>
                                    <argument>${project.build.directory}/generated/objc</argument>
                                    <argument>**/*.java</argument>
                                </arguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin-->

            </plugins>
        </pluginManagement>

    </build>

    <profiles>
        <!--
         **************************
         * J2objc-download profile *
         **************************
         Automatic j2objc install (zip download & unpack in the user directory)
         Done just once, when this root pom is executed for the first time on the build machine
         using a maven profile in order to skip the install if already done
         -->
        <profile>
            <id>j2objc-download</id>
            <activation>
                <!-- the profile is activated only if j2objc.jar doesn't exist -->
                <activeByDefault>false</activeByDefault>
                <file>
                    <!-- <missing>${j2objc.jar}</missing> doesn't work (properties not supported here) so using explicit name -->
                    <!-- <missing>${user.home}/j2objc-1.0.0/lib/j2objc.jar</missing> --> <!-- env properties are however supported -->
                </file>
                <!-- otherwise j2objc is considered already installed and the installation is skipped -->
            </activation>
            <build>
                <plugins>
                    <!-- j2objc download (big zip file) and unpack -->
                    <plugin>
                        <groupId>com.googlecode.maven-download-plugin</groupId>
                        <artifactId>download-maven-plugin</artifactId>
                        <version>${plugin.download.version}</version>
                        <inherited>false</inherited> <!-- to not run it in children modules -->
                        <executions>
                            <execution>
                                <id>j2objc-download</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://github.com/google/j2objc/releases/download/${tool.j2objc.version}/j2objc-${tool.j2objc.version}.zip</url>
                                    <unpack>true</unpack>
                                    <overwrite>false</overwrite>
                                    <outputDirectory>${tool.j2objc.param.parent}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>grunt</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <plugin.grunt.disabled>false</plugin.grunt.disabled>
            </properties>
        </profile>
    </profiles>

</project>