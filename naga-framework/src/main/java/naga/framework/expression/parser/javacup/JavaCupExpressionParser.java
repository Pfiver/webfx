
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package naga.framework.expression.parser.javacup;

import naga.commons.util.Numbers;
import naga.framework.expression.builder.terms.*;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCupExpressionParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ExpressionSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCupExpressionParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCupExpressionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCupExpressionParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\034\005\000\002\034\003\000\002\035\005" +
    "\000\002\035\005\000\002\015\005\000\002\015\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\026\005\000\002\026\003\000\002\040\003\000\002\040" +
    "\004\000\002\016\003\000\002\017\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\011\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\011\000\002\023\005\000\002\024\003\000\002\024" +
    "\005\000\002\024\011\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\006\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\005\000\002\013\007\000" +
    "\002\013\007\000\002\013\005\000\002\013\010\000\002" +
    "\013\006\000\002\013\011\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\007" +
    "\000\002\013\005\000\002\013\003\000\002\013\006\000" +
    "\002\013\005\000\002\013\006\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\036\005" +
    "\000\002\036\003\000\002\027\003\000\002\027\003\000" +
    "\002\031\003\000\002\031\004\000\002\031\006\000\002" +
    "\031\010\000\002\031\006\000\002\030\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\037\005\000\002\037\003\000\002\032\004\000" +
    "\002\032\004\000\002\032\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\004\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\006\000\002\006\007\000\002\007\005\000" +
    "\002\007\003\000\002\010\005\000\002\010\007\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\004\012\005\015\001\002\000\042\022" +
    "\045\025\027\031\041\032\026\033\034\035\031\043\043" +
    "\044\215\050\211\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\317\001\002\000\010\002\uff96\021\315" +
    "\034\uff96\001\002\000\016\002\uff9d\010\313\011\uff9d\013" +
    "\uff9d\021\uff9d\034\uff9d\001\002\000\006\002\uff95\034\uff95" +
    "\001\002\000\004\002\312\001\002\000\014\002\uff9a\011" +
    "\306\013\uff9a\021\uff9a\034\uff9a\001\002\000\042\022\045" +
    "\025\027\031\041\032\026\033\034\035\031\043\043\044" +
    "\215\050\211\051\032\052\023\061\050\062\037\063\035" +
    "\064\036\065\033\001\002\000\004\002\000\001\002\000" +
    "\012\002\uff98\013\020\021\uff98\034\uff98\001\002\000\044" +
    "\006\uffa5\022\uffa5\025\uffa5\031\uffa5\032\uffa5\033\uffa5\035" +
    "\uffa5\043\uffa5\044\uffa5\050\uffa5\051\uffa5\052\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\001\002\000\044\006" +
    "\017\022\uffa3\025\uffa3\031\uffa3\032\uffa3\033\uffa3\035\uffa3" +
    "\043\uffa3\044\uffa3\050\uffa3\051\uffa3\052\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\001\002\000\042\022\uffa4" +
    "\025\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\043\uffa4\044" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\001\002\000\036\022\045\025\027\031" +
    "\041\032\026\033\034\035\031\043\043\051\032\052\023" +
    "\061\050\062\037\063\035\064\036\065\033\001\002\000" +
    "\102\002\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\104\002\uffc2\007\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\021\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\ufff1\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\001\002\000\104\002\uffb7\007\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\034\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\065\263\001\002\000" +
    "\066\002\uffa9\014\261\015\262\016\uffa9\021\uffa9\023\073" +
    "\024\113\025\102\026\104\034\uffa9\040\uffa9\042\076\043" +
    "\111\044\107\045\110\046\112\047\105\050\074\051\103" +
    "\052\075\053\115\054\106\055\114\056\077\057\072\060" +
    "\100\001\002\000\102\002\uffb8\007\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\034\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\001\002\000\106\002\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\021\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\033\256\034\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002" +
    "\000\104\002\uffbd\007\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\034\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\001\002\000\102\002\uffb9\007\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\034\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\001\002\000\042\022\045\025" +
    "\027\031\041\032\026\033\034\035\031\043\043\044\215" +
    "\050\211\051\032\052\023\061\050\062\037\063\035\064" +
    "\036\065\033\001\002\000\036\022\045\025\027\031\041" +
    "\032\026\033\034\035\031\043\043\051\032\052\023\061" +
    "\050\062\037\063\035\064\036\065\033\001\002\000\106" +
    "\002\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\033\210\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\001\002\000\040\005\015\022\045\025\027" +
    "\031\041\032\026\033\034\035\031\043\043\051\032\052" +
    "\023\061\050\062\037\063\035\064\036\065\033\001\002" +
    "\000\102\002\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\021\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\001\002\000\102\002\uffb0\007\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\021\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\001\002\000\102\002\uffb2\007\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\021\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\001\002\000\012\002\uffac" +
    "\021\uffac\034\uffac\040\uffac\001\002\000\102\002\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000\012" +
    "\002\uff99\021\uff99\034\uff99\040\202\001\002\000\004\062" +
    "\201\001\002\000\102\002\uffc1\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\021\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\060\uffc1\001\002\000\004\033\176\001\002\000" +
    "\004\041\056\001\002\000\014\002\uffa6\016\052\021\uffa6" +
    "\034\uffa6\040\uffa6\001\002\000\102\002\uffae\007\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\021\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\034\uffae\036\uffae\037" +
    "\uffae\040\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\060\uffae\001\002\000\102\002\uffbf" +
    "\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\034\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\001\002\000" +
    "\006\017\054\020\053\001\002\000\012\002\uffa7\021\uffa7" +
    "\034\uffa7\040\uffa7\001\002\000\012\002\uffa8\021\uffa8\034" +
    "\uffa8\040\uffa8\001\002\000\014\025\027\032\070\033\067" +
    "\035\066\065\062\001\002\000\022\025\ufff3\032\ufff3\033" +
    "\ufff3\035\ufff3\041\057\044\ufff3\050\ufff3\065\ufff3\001\002" +
    "\000\020\025\ufff2\032\ufff2\033\ufff2\035\ufff2\044\ufff2\050" +
    "\ufff2\065\ufff2\001\002\000\102\002\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\021\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\034\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\001\002\000\102\002\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\034\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001\002\000\104" +
    "\002\uffbe\007\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\034\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\001\002\000\104\002\uffea\007\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\021\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\034\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\ufff1\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\001\002\000\102\002\uffe9\007" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\034\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\001\002\000\102" +
    "\002\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\034\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\001" +
    "\002\000\010\025\027\032\070\065\062\001\002\000\036" +
    "\022\045\025\027\031\041\032\026\033\034\035\031\043" +
    "\043\051\032\052\023\061\050\062\037\063\035\064\036" +
    "\065\033\001\002\000\104\002\uffbc\007\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\021\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\034\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000\052\023\073" +
    "\024\113\025\102\026\104\034\101\042\076\043\111\044" +
    "\107\045\110\046\112\047\105\050\074\051\103\052\075" +
    "\053\115\054\106\055\114\056\077\057\072\060\100\001" +
    "\002\000\036\022\045\025\027\031\041\032\026\033\034" +
    "\035\031\043\043\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\033\001\002\000\006\051\162\061\163" +
    "\001\002\000\036\022\045\025\027\031\041\032\026\033" +
    "\034\035\031\043\043\051\032\052\023\061\050\062\037" +
    "\063\035\064\036\065\033\001\002\000\036\022\045\025" +
    "\027\031\041\032\026\033\034\035\031\043\043\051\032" +
    "\052\023\061\050\062\037\063\035\064\036\065\033\001" +
    "\002\000\036\022\045\025\027\031\041\032\026\033\034" +
    "\035\031\043\043\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\033\001\002\000\036\022\045\025\027" +
    "\031\041\032\026\033\034\035\031\043\043\051\032\052" +
    "\023\061\050\062\037\063\035\064\036\065\033\001\002" +
    "\000\036\022\045\025\027\031\041\032\026\033\034\035" +
    "\031\043\043\051\032\052\023\061\050\062\037\063\035" +
    "\064\036\065\033\001\002\000\102\002\uffe5\007\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\034\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\001\002\000\006\033\142" +
    "\052\023\001\002\000\004\024\134\001\002\000\004\065" +
    "\133\001\002\000\036\022\045\025\027\031\041\032\026" +
    "\033\034\035\031\043\043\051\032\052\023\061\050\062" +
    "\037\063\035\064\036\065\033\001\002\000\036\022\045" +
    "\025\027\031\041\032\026\033\034\035\031\043\043\051" +
    "\032\052\023\061\050\062\037\063\035\064\036\065\033" +
    "\001\002\000\036\022\045\025\027\031\041\032\026\033" +
    "\034\035\031\043\043\051\032\052\023\061\050\062\037" +
    "\063\035\064\036\065\033\001\002\000\036\022\045\025" +
    "\027\031\041\032\026\033\034\035\031\043\043\051\032" +
    "\052\023\061\050\062\037\063\035\064\036\065\033\001" +
    "\002\000\036\022\045\025\027\031\041\032\026\033\034" +
    "\035\031\043\043\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\033\001\002\000\036\022\045\025\027" +
    "\031\041\032\026\033\034\035\031\043\043\051\032\052" +
    "\023\061\050\062\037\063\035\064\036\065\033\001\002" +
    "\000\040\022\045\025\027\027\121\031\041\032\026\033" +
    "\034\035\031\043\043\051\032\052\023\061\050\062\037" +
    "\063\035\064\036\065\033\001\002\000\036\022\045\025" +
    "\027\031\041\032\026\033\034\035\031\043\043\051\032" +
    "\052\023\061\050\062\037\063\035\064\036\065\033\001" +
    "\002\000\036\022\045\025\027\031\041\032\026\033\034" +
    "\035\031\043\043\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\033\001\002\000\102\002\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\034\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\042\076\043\111\044\107\045\110\046" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002\000\102\002" +
    "\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\034" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\042\076\043\111\044\107" +
    "\045\110\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\001\002" +
    "\000\102\002\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\042\076\043" +
    "\111\044\107\045\110\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060" +
    "\uffd0\001\002\000\004\033\122\001\002\000\036\022\045" +
    "\025\027\031\041\032\026\033\034\035\031\043\043\051" +
    "\032\052\023\061\050\062\037\063\035\064\036\065\033" +
    "\001\002\000\052\023\073\024\113\025\102\026\104\034" +
    "\124\042\076\043\111\044\107\045\110\046\112\047\105" +
    "\050\074\051\103\052\075\053\115\054\106\055\114\056" +
    "\077\057\072\060\100\001\002\000\102\002\uffcf\007\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\021" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\034\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\001\002\000\102\002" +
    "\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\034" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\042\076\043\111\044\107" +
    "\045\110\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\001\002" +
    "\000\102\002\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043" +
    "\uffcb\044\107\045\110\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\001\002\000\102\002\uffc9\007\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\021\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\001\002\000\102\002\uffca\007\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\021\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\034\uffca\036\uffca\037" +
    "\uffca\040\uffca\042\uffca\043\uffca\044\107\045\110\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\001\002\000\102\002\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\034\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\042\076\043\111\044\107\045" +
    "\110\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\001\002\000" +
    "\102\002\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\042\076\043\111" +
    "\044\107\045\110\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\001\002\000\102\002\uffe1\007\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\001\002\000\040\022\045\025\027\030\136" +
    "\031\041\032\026\033\034\035\031\043\043\051\032\052" +
    "\023\061\050\062\037\063\035\064\036\065\033\001\002" +
    "\000\102\002\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\021\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\034\uffce\036\uffce\037\uffce\040\uffce\042\076\043" +
    "\111\044\107\045\110\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\001\002\000\004\033\137\001\002\000\036\022\045" +
    "\025\027\031\041\032\026\033\034\035\031\043\043\051" +
    "\032\052\023\061\050\062\037\063\035\064\036\065\033" +
    "\001\002\000\052\023\073\024\113\025\102\026\104\034" +
    "\141\042\076\043\111\044\107\045\110\046\112\047\105" +
    "\050\074\051\103\052\075\053\115\054\106\055\114\056" +
    "\077\057\072\060\100\001\002\000\102\002\uffcd\007\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\034\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\001\002\000\020\005" +
    "\015\043\043\052\023\061\050\062\037\063\035\064\036" +
    "\001\002\000\102\002\uffd3\007\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\060\uffd3\001\002\000\006\034\151\040\150\001\002" +
    "\000\004\034\147\001\002\000\006\034\uffba\040\uffba\001" +
    "\002\000\102\002\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\021\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\001\002\000\016\043\043\052\023\061\050\062" +
    "\037\063\035\064\036\001\002\000\102\002\uffd2\007\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\001\002\000\006\034" +
    "\uffbb\040\uffbb\001\002\000\102\002\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\021\uffe3\023" +
    "\073\024\113\025\102\026\uffe3\034\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\076\043\111\044\107\045\110\046\112\047" +
    "\105\050\074\051\103\052\uffe3\053\115\054\106\055\114" +
    "\056\077\057\072\060\100\001\002\000\102\002\uffda\007" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\034\uffda\036" +
    "\uffda\037\uffda\040\uffda\042\076\043\111\044\107\045\110" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\001\002\000\102" +
    "\002\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\034\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043\111\044" +
    "\107\045\110\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\001" +
    "\002\000\052\023\073\024\113\025\102\026\104\037\157" +
    "\042\076\043\111\044\107\045\110\046\112\047\105\050" +
    "\074\051\103\052\075\053\115\054\106\055\114\056\077" +
    "\057\072\060\100\001\002\000\036\022\045\025\027\031" +
    "\041\032\026\033\034\035\031\043\043\051\032\052\023" +
    "\061\050\062\037\063\035\064\036\065\033\001\002\000" +
    "\102\002\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\021\uffc8\023\073\024\113\025\102\026" +
    "\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\042\076\043\111" +
    "\044\107\045\110\046\112\047\105\050\074\051\103\052" +
    "\075\053\115\054\106\055\114\056\077\057\072\060\100" +
    "\001\002\000\102\002\uffd9\007\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\042" +
    "\076\043\111\044\107\045\110\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\001\002\000\004\061\164\001\002\000\102" +
    "\002\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\034\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\001" +
    "\002\000\102\002\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\001\002\000\102\002\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\021\uffe2\023\073" +
    "\024\113\025\102\026\uffe2\034\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\042\076\043\111\044\107\045\110\046\112\047\105" +
    "\050\074\051\103\052\uffe2\053\115\054\106\055\114\056" +
    "\077\057\072\060\uffe2\001\002\000\004\026\170\001\002" +
    "\000\004\026\ufff1\001\002\000\004\065\171\001\002\000" +
    "\004\036\172\001\002\000\004\041\056\001\002\000\014" +
    "\025\027\032\070\033\067\035\066\065\062\001\002\000" +
    "\102\002\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4" +
    "\001\002\000\102\002\uffe8\007\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\001\002\000\004\005\015\001\002\000\004" +
    "\034\200\001\002\000\102\002\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\034\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\001\002\000\102\002\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\021" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\034\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1" +
    "\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002\000\036\022" +
    "\045\025\027\031\041\032\026\033\034\035\031\043\043" +
    "\051\032\052\023\061\050\062\037\063\035\064\036\065" +
    "\033\001\002\000\012\002\uffad\021\uffad\034\uffad\040\uffad" +
    "\001\002\000\052\023\073\024\113\025\102\026\104\034" +
    "\207\042\076\043\111\044\107\045\110\046\112\047\105" +
    "\050\074\051\103\052\075\053\115\054\106\055\114\056" +
    "\077\057\072\060\100\001\002\000\004\034\206\001\002" +
    "\000\102\002\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\001\002\000\102\002\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\021\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\034\uffde\036\uffde\037\uffde\040\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\001\002\000\044\022\045\025\027\031" +
    "\041\032\026\033\034\034\213\035\031\043\043\044\215" +
    "\050\211\051\032\052\023\061\050\062\037\063\035\064" +
    "\036\065\033\001\002\000\004\065\251\001\002\000\070" +
    "\002\ufff8\007\ufff8\012\ufff8\013\ufff8\021\ufff8\023\073\024" +
    "\113\025\102\026\104\034\ufff8\036\ufff8\040\ufff8\042\076" +
    "\043\111\044\107\045\110\046\112\047\105\050\074\051" +
    "\103\052\075\053\115\054\106\055\114\056\077\057\072" +
    "\060\100\001\002\000\102\002\uffc4\007\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\021\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\034\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\001\002\000\022\002\ufff6\007\ufff6" +
    "\012\ufff6\013\ufff6\021\ufff6\034\ufff6\036\ufff6\040\ufff6\001" +
    "\002\000\022\002\ufff4\007\ufff4\012\ufff4\013\ufff4\021\ufff4" +
    "\034\ufff4\036\ufff4\040\ufff4\001\002\000\006\034\247\040" +
    "\246\001\002\000\004\041\056\001\002\000\010\034\ufff9" +
    "\036\ufff9\040\ufff9\001\002\000\022\002\ufff7\007\ufff7\012" +
    "\ufff7\013\ufff7\021\ufff7\034\ufff7\036\ufff7\040\ufff7\001\002" +
    "\000\020\025\027\032\070\033\227\035\226\044\215\050" +
    "\211\065\062\001\002\000\022\002\uffee\007\uffee\012\uffee" +
    "\013\uffee\021\uffee\034\uffee\036\uffee\040\uffee\001\002\000" +
    "\022\002\ufff0\007\ufff0\012\ufff0\013\ufff0\021\ufff0\034\ufff0" +
    "\036\ufff0\040\ufff0\001\002\000\022\002\uffef\007\uffef\012" +
    "\uffef\013\uffef\021\uffef\034\uffef\036\uffef\040\uffef\001\002" +
    "\000\010\025\027\032\070\065\062\001\002\000\042\022" +
    "\045\025\027\031\041\032\026\033\034\035\031\043\043" +
    "\044\215\050\211\051\032\052\023\061\050\062\037\063" +
    "\035\064\036\065\033\001\002\000\054\023\073\024\113" +
    "\025\102\026\104\034\101\040\ufff8\042\076\043\111\044" +
    "\107\045\110\046\112\047\105\050\074\051\103\052\075" +
    "\053\115\054\106\055\114\056\077\057\072\060\100\001" +
    "\002\000\006\034\236\040\235\001\002\000\004\040\233" +
    "\001\002\000\042\022\045\025\027\031\041\032\026\033" +
    "\034\035\031\043\043\044\215\050\211\051\032\052\023" +
    "\061\050\062\037\063\035\064\036\065\033\001\002\000" +
    "\006\034\ufffb\040\ufffb\001\002\000\042\022\045\025\027" +
    "\031\041\032\026\033\034\035\031\043\043\044\215\050" +
    "\211\051\032\052\023\061\050\062\037\063\035\064\036" +
    "\065\033\001\002\000\022\002\uffed\007\uffed\012\uffed\013" +
    "\uffed\021\uffed\034\uffed\036\uffed\040\uffed\001\002\000\006" +
    "\034\ufffc\040\ufffc\001\002\000\004\026\241\001\002\000" +
    "\004\065\242\001\002\000\004\036\243\001\002\000\004" +
    "\041\056\001\002\000\020\025\027\032\070\033\227\035" +
    "\226\044\215\050\211\065\062\001\002\000\022\002\uffec" +
    "\007\uffec\012\uffec\013\uffec\021\uffec\034\uffec\036\uffec\040" +
    "\uffec\001\002\000\036\022\045\025\027\031\041\032\026" +
    "\033\034\035\031\043\043\051\032\052\023\061\050\062" +
    "\037\063\035\064\036\065\033\001\002\000\102\002\uffc3" +
    "\007\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\034\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000" +
    "\056\023\073\024\113\025\102\026\104\034\ufffa\036\ufffa" +
    "\040\ufffa\042\076\043\111\044\107\045\110\046\112\047" +
    "\105\050\074\051\103\052\075\053\115\054\106\055\114" +
    "\056\077\057\072\060\100\001\002\000\004\047\252\001" +
    "\002\000\022\002\ufff5\007\ufff5\012\ufff5\013\ufff5\021\ufff5" +
    "\034\ufff5\036\ufff5\040\ufff5\001\002\000\102\002\uffe0\007" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\021\uffe0\023\073\024\113\025\102\026\uffe0\034\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\042\076\043\111\044\107\045\110" +
    "\046\112\047\105\050\074\051\103\052\uffe0\053\115\054" +
    "\106\055\114\056\077\057\uffe0\060\uffe0\001\002\000\006" +
    "\036\255\040\246\001\002\000\102\002\uffdd\007\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\034\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002\000\036\022\045" +
    "\025\027\031\041\032\026\033\034\035\031\043\043\051" +
    "\032\052\023\061\050\062\037\063\035\064\036\065\033" +
    "\001\002\000\052\023\073\024\113\025\102\026\104\034" +
    "\260\042\076\043\111\044\107\045\110\046\112\047\105" +
    "\050\074\051\103\052\075\053\115\054\106\055\114\056" +
    "\077\057\072\060\100\001\002\000\102\002\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\034\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\001\002\000\014\002" +
    "\uffaa\016\uffaa\021\uffaa\034\uffaa\040\uffaa\001\002\000\014" +
    "\002\uffab\016\uffab\021\uffab\034\uffab\040\uffab\001\002\000" +
    "\104\002\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\264\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\012\025\027\032\070\033\267\065" +
    "\062\001\002\000\102\002\uffb3\007\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\001\002\000\004\041\056\001\002\000" +
    "\036\022\045\025\027\031\041\032\026\033\034\035\031" +
    "\043\043\051\032\052\023\061\050\062\037\063\035\064" +
    "\036\065\033\001\002\000\104\002\uffb5\007\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\021\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\ufff1\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\001\002\000\052\023" +
    "\073\024\113\025\102\026\104\034\272\042\076\043\111" +
    "\044\107\045\110\046\112\047\105\050\074\051\103\052" +
    "\075\053\115\054\106\055\114\056\077\057\072\060\100" +
    "\001\002\000\102\002\uffb4\007\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\021\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\001\002\000\012\025\027\032\070\035\274" +
    "\065\062\001\002\000\010\025\027\032\070\065\062\001" +
    "\002\000\004\026\276\001\002\000\004\065\277\001\002" +
    "\000\004\036\300\001\002\000\004\041\056\001\002\000" +
    "\012\025\027\032\070\035\274\065\062\001\002\000\006" +
    "\002\uffff\040\304\001\002\000\020\002\ufffd\007\ufffd\012" +
    "\ufffd\013\ufffd\021\ufffd\034\ufffd\040\ufffd\001\002\000\042" +
    "\022\045\025\027\031\041\032\026\033\034\035\031\043" +
    "\043\044\215\050\211\051\032\052\023\061\050\062\037" +
    "\063\035\064\036\065\033\001\002\000\020\002\ufffe\007" +
    "\ufffe\012\ufffe\013\ufffe\021\ufffe\034\ufffe\040\ufffe\001\002" +
    "\000\042\022\045\025\027\031\041\032\026\033\034\035" +
    "\031\043\043\044\215\050\211\051\032\052\023\061\050" +
    "\062\037\063\035\064\036\065\033\001\002\000\016\002" +
    "\uff9c\012\310\013\uff9c\021\uff9c\034\uff9c\040\304\001\002" +
    "\000\036\022\045\025\027\031\041\032\026\033\034\035" +
    "\031\043\043\051\032\052\023\061\050\062\037\063\035" +
    "\064\036\065\033\001\002\000\060\002\uff9b\013\uff9b\021" +
    "\uff9b\023\073\024\113\025\102\026\104\034\uff9b\042\076" +
    "\043\111\044\107\045\110\046\112\047\105\050\074\051" +
    "\103\052\075\053\115\054\106\055\114\056\077\057\072" +
    "\060\100\001\002\000\004\002\001\001\002\000\036\022" +
    "\045\025\027\031\041\032\026\033\034\035\031\043\043" +
    "\051\032\052\023\061\050\062\037\063\035\064\036\065" +
    "\033\001\002\000\062\002\uff9e\011\uff9e\013\uff9e\021\uff9e" +
    "\023\073\024\113\025\102\026\104\034\uff9e\042\076\043" +
    "\111\044\107\045\110\046\112\047\105\050\074\051\103" +
    "\052\075\053\115\054\106\055\114\056\077\057\072\060" +
    "\100\001\002\000\036\022\045\025\027\031\041\032\026" +
    "\033\034\035\031\043\043\051\032\052\023\061\050\062" +
    "\037\063\035\064\036\065\033\001\002\000\054\002\uff97" +
    "\023\073\024\113\025\102\026\104\034\uff97\042\076\043" +
    "\111\044\107\045\110\046\112\047\105\050\074\051\103" +
    "\052\075\053\115\054\106\055\114\056\077\057\072\060" +
    "\100\001\002\000\076\002\uffa2\007\uffbe\010\uffa2\011\uffa2" +
    "\013\uffa2\021\uffa2\023\uffbe\024\uffbe\025\uffbe\026\uffbe\033" +
    "\210\034\uffa2\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\065\324" +
    "\001\002\000\006\007\321\040\304\001\002\000\004\065" +
    "\322\001\002\000\020\002\uffa0\010\uffa0\011\uffa0\013\uffa0" +
    "\021\uffa0\034\uffa0\065\323\001\002\000\016\002\uff9f\010" +
    "\uff9f\011\uff9f\013\uff9f\021\uff9f\034\uff9f\001\002\000\016" +
    "\002\uffa1\010\uffa1\011\uffa1\013\uffa1\021\uffa1\034\uffa1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\024\002\007\003\012\004\015\005\003\006" +
    "\005\007\010\010\013\011\004\012\006\001\001\000\032" +
    "\013\211\014\302\016\216\017\213\021\043\023\020\025" +
    "\021\026\220\027\050\030\024\031\027\034\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\013\211\014\302" +
    "\016\216\017\213\021\043\023\020\025\021\026\220\027" +
    "\050\030\024\031\027\034\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\023\016\045\021\043\023\020" +
    "\025\021\027\050\030\024\031\027\032\046\033\037\037" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\211" +
    "\014\217\015\253\016\216\017\213\021\043\023\020\025" +
    "\021\026\220\027\050\030\024\031\027\001\001\000\022" +
    "\013\252\016\045\021\043\023\020\025\021\027\050\030" +
    "\024\031\027\001\001\000\002\001\001\000\042\003\204" +
    "\004\015\005\003\006\005\007\010\010\013\011\004\012" +
    "\006\013\203\016\045\021\043\023\020\025\021\027\050" +
    "\030\024\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\045\021\063" +
    "\022\060\023\064\024\057\025\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\165\025\166\001\001\000\022" +
    "\013\070\016\045\021\043\023\020\025\021\027\050\030" +
    "\024\031\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\164\016\045\021\043\023\020\025\021\027" +
    "\050\030\024\031\027\001\001\000\002\001\001\000\022" +
    "\013\160\016\045\021\043\023\020\025\021\027\050\030" +
    "\024\031\027\001\001\000\022\013\155\016\045\021\043" +
    "\023\020\025\021\027\050\030\024\031\027\001\001\000" +
    "\022\013\154\016\045\021\043\023\020\025\021\027\050" +
    "\030\024\031\027\001\001\000\022\013\153\016\045\021" +
    "\043\023\020\025\021\027\050\030\024\031\027\001\001" +
    "\000\022\013\152\016\045\021\043\023\020\025\021\027" +
    "\050\030\024\031\027\001\001\000\002\001\001\000\004" +
    "\031\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\131\016\045\021\043\023\020\025\021\027\050" +
    "\030\024\031\027\001\001\000\022\013\130\016\045\021" +
    "\043\023\020\025\021\027\050\030\024\031\027\001\001" +
    "\000\022\013\127\016\045\021\043\023\020\025\021\027" +
    "\050\030\024\031\027\001\001\000\022\013\126\016\045" +
    "\021\043\023\020\025\021\027\050\030\024\031\027\001" +
    "\001\000\022\013\125\016\045\021\043\023\020\025\021" +
    "\027\050\030\024\031\027\001\001\000\022\013\124\016" +
    "\045\021\043\023\020\025\021\027\050\030\024\031\027" +
    "\001\001\000\022\013\117\016\045\021\043\023\020\025" +
    "\021\027\050\030\024\031\027\001\001\000\022\013\116" +
    "\016\045\021\043\023\020\025\021\027\050\030\024\031" +
    "\027\001\001\000\022\013\115\016\045\021\043\023\020" +
    "\025\021\027\050\030\024\031\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\122\016\045\021\043\023\020\025\021\027" +
    "\050\030\024\031\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\134\016\045\021\043\023" +
    "\020\025\021\027\050\030\024\031\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\137\016\045\021" +
    "\043\023\020\025\021\027\050\030\024\031\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\144\004" +
    "\015\005\003\006\005\007\010\010\013\011\004\012\006" +
    "\027\145\030\024\031\027\036\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\151\030\024\031\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\157\016\045\021\043\023\020\025\021\027\050" +
    "\030\024\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\172\001\001" +
    "\000\016\016\045\021\063\022\174\023\064\024\173\025" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\176\004\015\005\003\006\005\007\010\010\013\011" +
    "\004\012\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\013\023\016\045\021\043\023" +
    "\020\025\021\027\050\030\024\031\027\032\046\033\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\211" +
    "\014\217\015\215\016\216\017\213\021\043\023\020\025" +
    "\021\026\220\027\050\030\024\031\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\216\017\222\020\223\021\063\022\060\023\064\024\057" +
    "\025\062\026\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\237\025\166\001\001" +
    "\000\032\013\227\014\231\016\216\017\213\021\043\023" +
    "\020\025\021\026\220\027\050\030\024\031\027\035\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\211\014\233\016\216\017\213\021\043" +
    "\023\020\025\021\026\220\027\050\030\024\031\027\001" +
    "\001\000\002\001\001\000\030\013\211\014\236\016\216" +
    "\017\213\021\043\023\020\025\021\026\220\027\050\030" +
    "\024\031\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\243\001\001\000\024\016\216\017\222\020\244" +
    "\021\063\022\174\023\064\024\173\025\062\026\224\001" +
    "\001\000\002\001\001\000\022\013\247\016\045\021\043" +
    "\023\020\025\021\027\050\030\024\031\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\256\016\045\021\043\023\020\025\021" +
    "\027\050\030\024\031\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\265\021\264\025\267\001\001\000" +
    "\002\001\001\000\004\040\272\001\001\000\022\013\270" +
    "\016\045\021\043\023\020\025\021\027\050\030\024\031" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\265\021\063\022\060\025\062\001" +
    "\001\000\006\016\274\025\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\300\001" +
    "\001\000\012\016\265\021\063\022\174\025\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\013\211\014" +
    "\304\016\216\017\213\021\043\023\020\025\021\026\220" +
    "\027\050\030\024\031\027\001\001\000\002\001\001\000" +
    "\032\013\211\014\302\016\216\017\213\021\043\023\020" +
    "\025\021\026\220\027\050\030\024\031\027\034\306\001" +
    "\001\000\002\001\001\000\022\013\310\016\045\021\043" +
    "\023\020\025\021\027\050\030\024\031\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\313\016\045" +
    "\021\043\023\020\025\021\027\050\030\024\031\027\001" +
    "\001\000\002\001\001\000\022\013\315\016\045\021\043" +
    "\023\020\025\021\027\050\030\024\031\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCupExpressionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCupExpressionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCupExpressionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCupExpressionParser$actions {
  private final JavaCupExpressionParser parser;

  /** Constructor */
  CUP$JavaCupExpressionParser$actions(JavaCupExpressionParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCupExpressionParser$do_action_part00000000(
    int                        CUP$JavaCupExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupExpressionParser$parser,
    java.util.Stack            CUP$JavaCupExpressionParser$stack,
    int                        CUP$JavaCupExpressionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCupExpressionParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCupExpressionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= parser_start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCupExpressionParser$parser.done_parsing();
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // parser_start ::= select_query 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parser_start",0, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parser_start ::= EXPR_START expr_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionArrayBuilder e = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parser_start",0, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list COMMA expr_list_token 
            {
              ExpressionArrayBuilder RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder t = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = list; RESULT.expressions.add(t); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_list",26, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= expr_list_token 
            {
              ExpressionArrayBuilder RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder t = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ExpressionArrayBuilder(t); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_list",26, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr2_list ::= expr2_list COMMA expr_list_token 
            {
              ExpressionArrayBuilder RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder t = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = list; RESULT.expressions.add(t); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr2_list",27, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr2_list ::= expr_list_token COMMA expr_list_token 
            {
              ExpressionArrayBuilder RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder t1 = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder t2 = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ExpressionArrayBuilder(t1); RESULT.expressions.add(t2); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr2_list",27, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_or_list ::= expr_or_list COMMA expr 
            {
              ExpressionBuilder RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder list = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = ExpressionArrayBuilder.add(list, e); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_or_list",11, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_or_list ::= expr_list_token 
            {
              ExpressionBuilder RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder t = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = t; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_or_list",11, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_list_token ::= expr 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_list_token",10, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_list_token ::= fields_group 
            {
              ExpressionBuilder RESULT =null;
		int fgleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder fg = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = fg; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_list_token",10, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_list_token ::= list_dot 
            {
              ExpressionBuilder RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder lf = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = lf; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_list_token",10, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fields_group ::= LT IDENTIFIER GT 
            {
              ExpressionBuilder RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new FieldsGroupBuilder(id); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("fields_group",20, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fields_group ::= MULT 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new FieldsGroupBuilder("*"); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("fields_group",20, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dot_op ::= DOT 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("dot_op",30, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dot_op ::= DOT DOT 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("dot_op",30, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // left_dot ::= field 
            {
              ExpressionBuilder RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder f = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = f; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("left_dot",12, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_dot ::= left_dot dot_op list_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(left, right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("list_dot",13, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_dot_right ::= fields_group 
            {
              ExpressionBuilder RESULT =null;
		int fgleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder fg = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = fg; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("list_dot_right",14, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_dot_right ::= list_dot 
            {
              ExpressionBuilder RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder ld = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = ld; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("list_dot_right",14, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_dot_right ::= LPAREN expr2_list RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionArrayBuilder el = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = el; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("list_dot_right",14, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_dot_right ::= LBRACK left_dot AS IDENTIFIER RBRACK dot_op list_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("list_dot_right",14, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // field_dot ::= left_dot dot_op field_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(left, right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field_dot",15, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // field_dot_right ::= field 
            {
              ExpressionBuilder RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder f = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = f; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field_dot_right",16, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // field_dot_right ::= field_dot 
            {
              ExpressionBuilder RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder fd = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = fd; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field_dot_right",16, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // field_dot_right ::= LBRACK left_dot AS IDENTIFIER RBRACK dot_op field_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field_dot_right",16, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_dot ::= left_dot dot_op expr_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(left, right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_dot",17, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr_dot_right ::= expr_dot 
            {
              ExpressionBuilder RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder ed = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = ed; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_dot_right",18, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_dot_right ::= LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_dot_right",18, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_dot_right ::= LBRACK left_dot AS IDENTIFIER RBRACK dot_op expr_dot_right 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int dotleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		Boolean dot = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DotBuilder(new AsBuilder(left, alias), right, dot); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr_dot_right",18, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr OR expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new OrBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr AND expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new AndBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr AS IDENTIFIER 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new AsBuilder(e, alias); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NOT expr 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new NotBuilder(e); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= EXISTS LPAREN select_query RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new ExistsBuilder(select); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = e; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LBRACK expr_or_list RBRACK 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new ArrayBuilder(e); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr EQ expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new EqualsBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr EQEQ expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new EqualsBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr NOTEQ expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new NotEqualsBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr LT expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new LessThanBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr LTEQ expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new LessThanOrEqualsBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr GT expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new GreaterThanBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr GTEQ expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new GreaterThanOrEqualsBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr IS NULL 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		 RESULT = new EqualsBuilder(left, new ConstantBuilder(null)); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr IS NOT NULL 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		 RESULT = new NotEqualsBuilder(left, new ConstantBuilder(null)); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr IN parameter 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new InBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr IN LPAREN val_list RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionArrayBuilder right = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new InBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr IN LPAREN select_query RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new InBuilder(left, new SelectExpressionBuilder(select)); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr LIKE expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new LikeBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr LIKE ANY LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new AnyBuilder(left, " like ", right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr NOT LIKE expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new NotLikeBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr NOT LIKE ALL LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new AllBuilder(left, " not like ", right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-6)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr PLUS expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new PlusBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MINUS expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new MinusBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr MULT expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new MultiplyBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DIV expr 
            {
              ExpressionBuilder RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder left = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new DivideBuilder(left, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr QUESTION expr COLON expr 
            {
              ExpressionBuilder RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		ExpressionBuilder q = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder y = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder n = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new TernaryExpressionBuilder(q, y, n); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= LPAREN select_query RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new SelectExpressionBuilder(select); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= OBJ_STATE 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new ObjStateBuilder(); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= IMAGE LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new ImageExpressionBuilder(e); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= IDENTIFIER LPAREN RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		 RESULT = new CallBuilder(name); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= IDENTIFIER LPAREN expr_or_list RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder arg = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new CallBuilder(name, arg); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= field 
            {
              ExpressionBuilder RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder f = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = f; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= field_dot 
            {
              ExpressionBuilder RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder ff = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = ff; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr_dot 
            {
              ExpressionBuilder RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder fe = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = fe; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= val 
            {
              ExpressionBuilder RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder v = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = v; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // field ::= IDENTIFIER 
            {
              ExpressionBuilder RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new FieldBuilder(id); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field",19, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // field ::= IN 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new FieldBuilder("in"); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field",19, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // field ::= IMAGE 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new FieldBuilder("image"); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("field",19, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val_list ::= val_list COMMA val 
            {
              ExpressionArrayBuilder RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder val = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = list; RESULT.expressions.add(val); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("val_list",28, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val_list ::= val 
            {
              ExpressionArrayBuilder RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder val = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ExpressionArrayBuilder(val); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("val_list",28, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // val ::= parameter 
            {
              ExpressionBuilder RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder p = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = p; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("val",21, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // val ::= constant 
            {
              ExpressionBuilder RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder c = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = c; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("val",21, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter ::= QUESTION 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new ParameterBuilder(); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter ::= QUESTION IDENTIFIER 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ParameterBuilder(name); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter ::= QUESTION IDENTIFIER DOT field 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ParameterBuilder(name, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter ::= QUESTION IDENTIFIER DOT LPAREN expr RPAREN 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = new ParameterBuilder(name, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-5)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameter ::= QUESTION IDENTIFIER DOT field_dot 
            {
              ExpressionBuilder RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder right = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ParameterBuilder(name, right); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant ::= NUMBER 
            {
              ExpressionBuilder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ConstantBuilder(n); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constant ::= MINUS NUMBER 
            {
              ExpressionBuilder RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ConstantBuilder(Numbers.negate(n)); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // constant ::= STRING 
            {
              ExpressionBuilder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ConstantBuilder(s); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constant ::= BOOLEAN 
            {
              ExpressionBuilder RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ConstantBuilder(b); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= NULL 
            {
              ExpressionBuilder RESULT =null;
		 RESULT = new ConstantBuilder(null); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // order_list ::= order_list COMMA ordered_nulls 
            {
              ExpressionArrayBuilder RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder o = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = list; RESULT.expressions.add(o); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("order_list",29, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // order_list ::= ordered_nulls 
            {
              ExpressionArrayBuilder RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder o = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = new ExpressionArrayBuilder(o); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("order_list",29, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ordered ::= expr ASC 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = OrderedBuilder.embed(e).setAscending(true); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered",24, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ordered ::= expr DESC 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = OrderedBuilder.embed(e).setDescending(true); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered",24, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ordered ::= expr 
            {
              ExpressionBuilder RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder e = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = e; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered",24, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ordered_nulls ::= ordered NULLS FIRST 
            {
              ExpressionBuilder RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder o = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		 RESULT = OrderedBuilder.embed(o).setNullsFirst(true); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered_nulls",25, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ordered_nulls ::= ordered NULLS LAST 
            {
              ExpressionBuilder RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionBuilder o = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		 RESULT = OrderedBuilder.embed(o).setNullsLast(true); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered_nulls",25, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ordered_nulls ::= ordered 
            {
              ExpressionBuilder RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder o = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("ordered_nulls",25, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // select_start ::= SELECT 
            {
              SelectBuilder RESULT =null;
		 RESULT = new SelectBuilder(); 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_start",2, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // select_distinct ::= select_start DISTINCT 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		 RESULT = select; RESULT.distinct = true; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_distinct",3, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // select_distinct ::= select_start 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_distinct",3, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // select_class ::= select_distinct IDENTIFIER 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.buildingClassName = className; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_class",4, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // select_class ::= select_distinct IDENTIFIER IDENTIFIER 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_class",4, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // select_class ::= select_distinct expr_list FROM IDENTIFIER 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder fields = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.fields = fields; RESULT.buildingClassName = className; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_class",4, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // select_class ::= select_distinct expr_list FROM IDENTIFIER IDENTIFIER 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).right;
		ExpressionArrayBuilder fields = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-1)).value;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		String alias = (String)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.fields = fields; RESULT.buildingClassName = className; RESULT.buildingClassAlias = alias; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_class",4, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // select_where ::= select_class WHERE expr 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int whereleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int whereright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder where = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.where = where; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_where",5, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // select_where ::= select_class 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_where",5, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // select_group ::= select_where GROUP_BY expr_list 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.groupBy = list; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_group",6, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // select_group ::= select_where GROUP_BY expr_list HAVING expr 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int havingleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int havingright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder having = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.groupBy = list; RESULT.having = having; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_group",6, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // select_group ::= select_where 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_group",6, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // select_order ::= select_group ORDER_BY order_list 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionArrayBuilder list = (ExpressionArrayBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.orderBy = list; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_order",7, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // select_order ::= select_group 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_order",7, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // select_limit ::= select_order LIMIT expr 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)).value;
		int limitleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		ExpressionBuilder limit = (ExpressionBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; RESULT.limit = limit; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_limit",8, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.elementAt(CUP$JavaCupExpressionParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // select_limit ::= select_order 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_limit",8, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // select_query ::= select_limit 
            {
              SelectBuilder RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()).right;
		SelectBuilder select = (SelectBuilder)((java_cup.runtime.Symbol) CUP$JavaCupExpressionParser$stack.peek()).value;
		 RESULT = select; 
              CUP$JavaCupExpressionParser$result = parser.getSymbolFactory().newSymbol("select_query",1, ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupExpressionParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupExpressionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCupExpressionParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCupExpressionParser$do_action(
    int                        CUP$JavaCupExpressionParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupExpressionParser$parser,
    java.util.Stack            CUP$JavaCupExpressionParser$stack,
    int                        CUP$JavaCupExpressionParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCupExpressionParser$do_action_part00000000(
                               CUP$JavaCupExpressionParser$act_num,
                               CUP$JavaCupExpressionParser$parser,
                               CUP$JavaCupExpressionParser$stack,
                               CUP$JavaCupExpressionParser$top);
    }
}

}
